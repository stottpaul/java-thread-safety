/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.stottp.java.thread.safety;

import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import static java.lang.Thread.sleep;
import static org.junit.jupiter.api.Assertions.*;

class ThreadInterferenceTest {
    @RepeatedTest(10)
    void appHasAGreeting() throws InterruptedException {
        Counter cnt = new Counter();
        int numberOfIncrements = 1000;

        CountDownLatch startingGun = new CountDownLatch(1);
        CountDownLatch finishedLatch = new CountDownLatch(numberOfIncrements);

        for (int a = 0; a < numberOfIncrements; a++) {
            new Thread(() -> {
                waitForStartingGun(startingGun);
                cnt.increment();
                finishedLatch.countDown();
            }).start();
        }

        startingGun.countDown();

        finishedLatch.await();
        System.out.println("Result: " + cnt.get());
    }

    private void waitForStartingGun(CountDownLatch latch) {
        try {
            latch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    static class Counter {
        private volatile int  a = 0;

        int increment() {
            return a++;
        }

        int get() {
            return a;
        }
    }
}
